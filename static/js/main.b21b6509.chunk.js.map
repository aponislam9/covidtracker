{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","StylesProvider","container","Typography","gutterBottom","variant","component","Grid","spacking","justify","item","Card","xs","md","cx","styles","card","infected","CardContent","color","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axious","get","modifiedData","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","console","log","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","lables","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b21b6509.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"deaths\":\"Cards_deaths__Qdjzq\",\"recovered\":\"Cards_recovered__1aizD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\n\n\n    if(!confirmed){\n        return 'loading'\n    }\n\n    \n    \n    return (\n        <div className={StylesProvider.container}>\n                <Typography gutterBottom variant=\"h3\" component=\"h2\">Global</Typography>\n            <Grid container spacking={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator={\",\"}>\n\n                            </CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of Covid 19</Typography>\n                    </CardContent>\n\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator={\",\"}>\n\n                        </CountUp>\n                            \n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from Covid 19</Typography>\n                    </CardContent>\n\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end={deaths .value} duration={2.5} separator={\",\"}>\n\n                        </CountUp>  \n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths from Covid 19</Typography>\n                    </CardContent>\n\n                </Grid>\n\n            </Grid>\n            \n        </div>\n    );\n};\n\nexport default Cards;","import axious from 'axios';\nimport Axios from 'axios';\n\n\nconst url = \"https://covid19.mathdro.id/api\"\n\nexport const fetchData = async(country) => {\n\n    let changeableUrl = url\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try{\n        const { data } = await axious.get(changeableUrl)\n\n       \n\n        const modifiedData = {\n            confirmed:data.confirmed,\n            recovered:data.recovered,\n            deaths:data.deaths,\n            lastUpdate:data.lastUpdate\n        }\n        \n        return modifiedData;\n\n    }\n    catch(error){\n\n    }\n}\n\n\n// export const fetchDailyData = async () => {\n//     try{\n\n//         const {data} = await axious.get(`${url}/daily`)\n\n\n//         const modifiedData = data.map((dailyData) => ({\n//             confirmed: dailyData.confirmed.total,\n//             deaths:dailyData.deaths.total,\n//             date:dailyData.reportDate,\n\n//         }));\n\n//         return modifiedData;\n\n        \n//     }\n\n//     catch (error){\n\n//     }\n// }\nexport const fetchDailyData = async () => {\n    try {\n      const { data } = await axious.get('https://api.covidtracking.com/v1/us/daily.json');\n\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\n    } catch (error) {\n      return error;\n    }\n  };\n\nexport const fetchCountries = async () => {\n    try {\n        const {data:{countries}} = await axious.get(`${url}/countries`);\n        \n\n        return countries.map((country)=>country.name)\n\n    } catch (error) {\n        console.log(error)\n    }\n}","import React, {useState, useEffect }from 'react';\nimport {fetchDailyData} from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\nimport styles from './Chart.module.css'\n\nconst Chart = ({data:{confirmed,deaths,recovered}, country}) => {\n\n    // Statefile and what sets it\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        // console.log(dailyData)\n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData.length\n        ?(<Line \n            data={{\n                // labels: dailyData.map(({date}) => date),\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                datasets: [{\n                    data:dailyData.map(({confirmed}) => confirmed),\n                    label:'Infected',\n                    borderColor:'#3333ff',\n                    fill:true,\n                },{\n                    data:dailyData.map(({deaths}) => deaths),\n                    label:'Deaths',\n                    borderColor:'#red',\n                    backgroundColor:'rgb(255,0,0,0.5)',\n                    fill:true,\n\n                }, {\n                    data: dailyData.map((data) => data.recovered),\n                    label: 'Recovered',\n                    borderColor: 'green',\n                    backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                    fill: true,\n\n                },\n            \n            ]\n            }}\n        />) : null\n\n\n    );\n        \n    console.log(confirmed,recovered)\n\n    const barChart = (\n        \n        confirmed?(\n            <Bar\n                data={{\n                    lables: ['gae','Recovered','Deaths'],\n                    datasets:[{\n                        label:'People',\n                        backgroundColor: [\n                            'rgba(0,0,255,0.5)',\n                            'rgba(0,255,0,0.5)',\n                            'rgba(255,0,0,0.5)',\n                        ],\n                        data:[confirmed.value, recovered.value, deaths.value]\n                    }]\n\n                }}\n\n                options= {{\n                    legend: {display:true},\n                    title:{display:true, text:`Current state in ${country}`},\n\n\n                }}\n            \n            />\n        ) : null\n        \n    );\n    \n\n    return (\n        <div className={styles.container}>\n            {country ? barChart:lineChart}    \n        </div>\n    );\n};\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([])\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries])\n\n    // console.log(\"fa\")\n    // console.log(fetchedCountries)\n    // console.log(\"Faef\")\n\n    return (\n        <FormControl className = {styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css'\nimport {fetchData, fetchDate} from './api/index.js';\n\n\n\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country:'',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData()\n\n   \n    this.setState({ data:fetchedData })\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData)\n\n    this.setState({data:fetchedData, country:country})\n\n    \n  }\n\n  render() {\n\n    const { data, country} = this.state;\n\n    return (\n      <div className=\"App\">\n        <Cards data={data}></Cards>\n        <CountryPicker handleCountryChange={this.handleCountryChange}></CountryPicker>\n        <Chart data={data} country={country}></Chart>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}